// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pbrpc {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class NormalRequestBody;
class RequestMsg;
class SuccessResponseBody;
class FailResponseBody;
class ResponseMsg;

enum RequestMsgType {
  NORMAL = 0,
  CANCEL = 1
};
bool RequestMsgType_IsValid(int value);
const RequestMsgType RequestMsgType_MIN = NORMAL;
const RequestMsgType RequestMsgType_MAX = CANCEL;
const int RequestMsgType_ARRAYSIZE = RequestMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RequestMsgType_descriptor();
inline const ::std::string& RequestMsgType_Name(RequestMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RequestMsgType_descriptor(), value);
}
inline bool RequestMsgType_Parse(
    const ::std::string& name, RequestMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RequestMsgType>(
    RequestMsgType_descriptor(), name, value);
}
enum ResponseMsgType {
  SUCCESS = 0,
  FAIL = 1
};
bool ResponseMsgType_IsValid(int value);
const ResponseMsgType ResponseMsgType_MIN = SUCCESS;
const ResponseMsgType ResponseMsgType_MAX = FAIL;
const int ResponseMsgType_ARRAYSIZE = ResponseMsgType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResponseMsgType_descriptor();
inline const ::std::string& ResponseMsgType_Name(ResponseMsgType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResponseMsgType_descriptor(), value);
}
inline bool ResponseMsgType_Parse(
    const ::std::string& name, ResponseMsgType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResponseMsgType>(
    ResponseMsgType_descriptor(), name, value);
}
// ===================================================================

class NormalRequestBody : public ::google::protobuf::Message {
 public:
  NormalRequestBody();
  virtual ~NormalRequestBody();

  NormalRequestBody(const NormalRequestBody& from);

  inline NormalRequestBody& operator=(const NormalRequestBody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NormalRequestBody& default_instance();

  void Swap(NormalRequestBody* other);

  // implements Message ----------------------------------------------

  NormalRequestBody* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NormalRequestBody& from);
  void MergeFrom(const NormalRequestBody& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string service_name = 1;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  inline void set_allocated_service_name(::std::string* service_name);

  // required string method_name = 2;
  inline bool has_method_name() const;
  inline void clear_method_name();
  static const int kMethodNameFieldNumber = 2;
  inline const ::std::string& method_name() const;
  inline void set_method_name(const ::std::string& value);
  inline void set_method_name(const char* value);
  inline void set_method_name(const char* value, size_t size);
  inline ::std::string* mutable_method_name();
  inline ::std::string* release_method_name();
  inline void set_allocated_method_name(::std::string* method_name);

  // optional bytes request_body = 10;
  inline bool has_request_body() const;
  inline void clear_request_body();
  static const int kRequestBodyFieldNumber = 10;
  inline const ::std::string& request_body() const;
  inline void set_request_body(const ::std::string& value);
  inline void set_request_body(const char* value);
  inline void set_request_body(const void* value, size_t size);
  inline ::std::string* mutable_request_body();
  inline ::std::string* release_request_body();
  inline void set_allocated_request_body(::std::string* request_body);

  // @@protoc_insertion_point(class_scope:pbrpc.proto.NormalRequestBody)
 private:
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_method_name();
  inline void clear_has_method_name();
  inline void set_has_request_body();
  inline void clear_has_request_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* service_name_;
  ::std::string* method_name_;
  ::std::string* request_body_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static NormalRequestBody* default_instance_;
};
// -------------------------------------------------------------------

class RequestMsg : public ::google::protobuf::Message {
 public:
  RequestMsg();
  virtual ~RequestMsg();

  RequestMsg(const RequestMsg& from);

  inline RequestMsg& operator=(const RequestMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestMsg& default_instance();

  void Swap(RequestMsg* other);

  // implements Message ----------------------------------------------

  RequestMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestMsg& from);
  void MergeFrom(const RequestMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .pbrpc.proto.RequestMsgType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::pbrpc::proto::RequestMsgType type() const;
  inline void set_type(::pbrpc::proto::RequestMsgType value);

  // optional .pbrpc.proto.NormalRequestBody normal_request = 10;
  inline bool has_normal_request() const;
  inline void clear_normal_request();
  static const int kNormalRequestFieldNumber = 10;
  inline const ::pbrpc::proto::NormalRequestBody& normal_request() const;
  inline ::pbrpc::proto::NormalRequestBody* mutable_normal_request();
  inline ::pbrpc::proto::NormalRequestBody* release_normal_request();
  inline void set_allocated_normal_request(::pbrpc::proto::NormalRequestBody* normal_request);

  // @@protoc_insertion_point(class_scope:pbrpc.proto.RequestMsg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_normal_request();
  inline void clear_has_normal_request();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  int type_;
  ::pbrpc::proto::NormalRequestBody* normal_request_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static RequestMsg* default_instance_;
};
// -------------------------------------------------------------------

class SuccessResponseBody : public ::google::protobuf::Message {
 public:
  SuccessResponseBody();
  virtual ~SuccessResponseBody();

  SuccessResponseBody(const SuccessResponseBody& from);

  inline SuccessResponseBody& operator=(const SuccessResponseBody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuccessResponseBody& default_instance();

  void Swap(SuccessResponseBody* other);

  // implements Message ----------------------------------------------

  SuccessResponseBody* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SuccessResponseBody& from);
  void MergeFrom(const SuccessResponseBody& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes response_body = 1;
  inline bool has_response_body() const;
  inline void clear_response_body();
  static const int kResponseBodyFieldNumber = 1;
  inline const ::std::string& response_body() const;
  inline void set_response_body(const ::std::string& value);
  inline void set_response_body(const char* value);
  inline void set_response_body(const void* value, size_t size);
  inline ::std::string* mutable_response_body();
  inline ::std::string* release_response_body();
  inline void set_allocated_response_body(::std::string* response_body);

  // @@protoc_insertion_point(class_scope:pbrpc.proto.SuccessResponseBody)
 private:
  inline void set_has_response_body();
  inline void clear_has_response_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* response_body_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static SuccessResponseBody* default_instance_;
};
// -------------------------------------------------------------------

class FailResponseBody : public ::google::protobuf::Message {
 public:
  FailResponseBody();
  virtual ~FailResponseBody();

  FailResponseBody(const FailResponseBody& from);

  inline FailResponseBody& operator=(const FailResponseBody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FailResponseBody& default_instance();

  void Swap(FailResponseBody* other);

  // implements Message ----------------------------------------------

  FailResponseBody* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FailResponseBody& from);
  void MergeFrom(const FailResponseBody& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string error_text = 1;
  inline bool has_error_text() const;
  inline void clear_error_text();
  static const int kErrorTextFieldNumber = 1;
  inline const ::std::string& error_text() const;
  inline void set_error_text(const ::std::string& value);
  inline void set_error_text(const char* value);
  inline void set_error_text(const char* value, size_t size);
  inline ::std::string* mutable_error_text();
  inline ::std::string* release_error_text();
  inline void set_allocated_error_text(::std::string* error_text);

  // @@protoc_insertion_point(class_scope:pbrpc.proto.FailResponseBody)
 private:
  inline void set_has_error_text();
  inline void clear_has_error_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* error_text_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static FailResponseBody* default_instance_;
};
// -------------------------------------------------------------------

class ResponseMsg : public ::google::protobuf::Message {
 public:
  ResponseMsg();
  virtual ~ResponseMsg();

  ResponseMsg(const ResponseMsg& from);

  inline ResponseMsg& operator=(const ResponseMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseMsg& default_instance();

  void Swap(ResponseMsg* other);

  // implements Message ----------------------------------------------

  ResponseMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResponseMsg& from);
  void MergeFrom(const ResponseMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required .pbrpc.proto.ResponseMsgType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::pbrpc::proto::ResponseMsgType type() const;
  inline void set_type(::pbrpc::proto::ResponseMsgType value);

  // optional .pbrpc.proto.SuccessResponseBody success_response = 10;
  inline bool has_success_response() const;
  inline void clear_success_response();
  static const int kSuccessResponseFieldNumber = 10;
  inline const ::pbrpc::proto::SuccessResponseBody& success_response() const;
  inline ::pbrpc::proto::SuccessResponseBody* mutable_success_response();
  inline ::pbrpc::proto::SuccessResponseBody* release_success_response();
  inline void set_allocated_success_response(::pbrpc::proto::SuccessResponseBody* success_response);

  // optional .pbrpc.proto.FailResponseBody error_response = 11;
  inline bool has_error_response() const;
  inline void clear_error_response();
  static const int kErrorResponseFieldNumber = 11;
  inline const ::pbrpc::proto::FailResponseBody& error_response() const;
  inline ::pbrpc::proto::FailResponseBody* mutable_error_response();
  inline ::pbrpc::proto::FailResponseBody* release_error_response();
  inline void set_allocated_error_response(::pbrpc::proto::FailResponseBody* error_response);

  // @@protoc_insertion_point(class_scope:pbrpc.proto.ResponseMsg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_success_response();
  inline void clear_has_success_response();
  inline void set_has_error_response();
  inline void clear_has_error_response();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  int type_;
  ::pbrpc::proto::SuccessResponseBody* success_response_;
  ::pbrpc::proto::FailResponseBody* error_response_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static ResponseMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// NormalRequestBody

// required string service_name = 1;
inline bool NormalRequestBody::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NormalRequestBody::set_has_service_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NormalRequestBody::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NormalRequestBody::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::kEmptyString) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& NormalRequestBody::service_name() const {
  return *service_name_;
}
inline void NormalRequestBody::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void NormalRequestBody::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void NormalRequestBody::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NormalRequestBody::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  return service_name_;
}
inline ::std::string* NormalRequestBody::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NormalRequestBody::set_allocated_service_name(::std::string* service_name) {
  if (service_name_ != &::google::protobuf::internal::kEmptyString) {
    delete service_name_;
  }
  if (service_name) {
    set_has_service_name();
    service_name_ = service_name;
  } else {
    clear_has_service_name();
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string method_name = 2;
inline bool NormalRequestBody::has_method_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NormalRequestBody::set_has_method_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NormalRequestBody::clear_has_method_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NormalRequestBody::clear_method_name() {
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    method_name_->clear();
  }
  clear_has_method_name();
}
inline const ::std::string& NormalRequestBody::method_name() const {
  return *method_name_;
}
inline void NormalRequestBody::set_method_name(const ::std::string& value) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
}
inline void NormalRequestBody::set_method_name(const char* value) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(value);
}
inline void NormalRequestBody::set_method_name(const char* value, size_t size) {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  method_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NormalRequestBody::mutable_method_name() {
  set_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    method_name_ = new ::std::string;
  }
  return method_name_;
}
inline ::std::string* NormalRequestBody::release_method_name() {
  clear_has_method_name();
  if (method_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_name_;
    method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NormalRequestBody::set_allocated_method_name(::std::string* method_name) {
  if (method_name_ != &::google::protobuf::internal::kEmptyString) {
    delete method_name_;
  }
  if (method_name) {
    set_has_method_name();
    method_name_ = method_name;
  } else {
    clear_has_method_name();
    method_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes request_body = 10;
inline bool NormalRequestBody::has_request_body() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NormalRequestBody::set_has_request_body() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NormalRequestBody::clear_has_request_body() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NormalRequestBody::clear_request_body() {
  if (request_body_ != &::google::protobuf::internal::kEmptyString) {
    request_body_->clear();
  }
  clear_has_request_body();
}
inline const ::std::string& NormalRequestBody::request_body() const {
  return *request_body_;
}
inline void NormalRequestBody::set_request_body(const ::std::string& value) {
  set_has_request_body();
  if (request_body_ == &::google::protobuf::internal::kEmptyString) {
    request_body_ = new ::std::string;
  }
  request_body_->assign(value);
}
inline void NormalRequestBody::set_request_body(const char* value) {
  set_has_request_body();
  if (request_body_ == &::google::protobuf::internal::kEmptyString) {
    request_body_ = new ::std::string;
  }
  request_body_->assign(value);
}
inline void NormalRequestBody::set_request_body(const void* value, size_t size) {
  set_has_request_body();
  if (request_body_ == &::google::protobuf::internal::kEmptyString) {
    request_body_ = new ::std::string;
  }
  request_body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NormalRequestBody::mutable_request_body() {
  set_has_request_body();
  if (request_body_ == &::google::protobuf::internal::kEmptyString) {
    request_body_ = new ::std::string;
  }
  return request_body_;
}
inline ::std::string* NormalRequestBody::release_request_body() {
  clear_has_request_body();
  if (request_body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = request_body_;
    request_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NormalRequestBody::set_allocated_request_body(::std::string* request_body) {
  if (request_body_ != &::google::protobuf::internal::kEmptyString) {
    delete request_body_;
  }
  if (request_body) {
    set_has_request_body();
    request_body_ = request_body;
  } else {
    clear_has_request_body();
    request_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RequestMsg

// required int32 id = 1;
inline bool RequestMsg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestMsg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestMsg::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RequestMsg::id() const {
  return id_;
}
inline void RequestMsg::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required .pbrpc.proto.RequestMsgType type = 2;
inline bool RequestMsg::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestMsg::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestMsg::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::pbrpc::proto::RequestMsgType RequestMsg::type() const {
  return static_cast< ::pbrpc::proto::RequestMsgType >(type_);
}
inline void RequestMsg::set_type(::pbrpc::proto::RequestMsgType value) {
  assert(::pbrpc::proto::RequestMsgType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .pbrpc.proto.NormalRequestBody normal_request = 10;
inline bool RequestMsg::has_normal_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestMsg::set_has_normal_request() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestMsg::clear_has_normal_request() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestMsg::clear_normal_request() {
  if (normal_request_ != NULL) normal_request_->::pbrpc::proto::NormalRequestBody::Clear();
  clear_has_normal_request();
}
inline const ::pbrpc::proto::NormalRequestBody& RequestMsg::normal_request() const {
  return normal_request_ != NULL ? *normal_request_ : *default_instance_->normal_request_;
}
inline ::pbrpc::proto::NormalRequestBody* RequestMsg::mutable_normal_request() {
  set_has_normal_request();
  if (normal_request_ == NULL) normal_request_ = new ::pbrpc::proto::NormalRequestBody;
  return normal_request_;
}
inline ::pbrpc::proto::NormalRequestBody* RequestMsg::release_normal_request() {
  clear_has_normal_request();
  ::pbrpc::proto::NormalRequestBody* temp = normal_request_;
  normal_request_ = NULL;
  return temp;
}
inline void RequestMsg::set_allocated_normal_request(::pbrpc::proto::NormalRequestBody* normal_request) {
  delete normal_request_;
  normal_request_ = normal_request;
  if (normal_request) {
    set_has_normal_request();
  } else {
    clear_has_normal_request();
  }
}

// -------------------------------------------------------------------

// SuccessResponseBody

// required bytes response_body = 1;
inline bool SuccessResponseBody::has_response_body() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuccessResponseBody::set_has_response_body() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuccessResponseBody::clear_has_response_body() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuccessResponseBody::clear_response_body() {
  if (response_body_ != &::google::protobuf::internal::kEmptyString) {
    response_body_->clear();
  }
  clear_has_response_body();
}
inline const ::std::string& SuccessResponseBody::response_body() const {
  return *response_body_;
}
inline void SuccessResponseBody::set_response_body(const ::std::string& value) {
  set_has_response_body();
  if (response_body_ == &::google::protobuf::internal::kEmptyString) {
    response_body_ = new ::std::string;
  }
  response_body_->assign(value);
}
inline void SuccessResponseBody::set_response_body(const char* value) {
  set_has_response_body();
  if (response_body_ == &::google::protobuf::internal::kEmptyString) {
    response_body_ = new ::std::string;
  }
  response_body_->assign(value);
}
inline void SuccessResponseBody::set_response_body(const void* value, size_t size) {
  set_has_response_body();
  if (response_body_ == &::google::protobuf::internal::kEmptyString) {
    response_body_ = new ::std::string;
  }
  response_body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SuccessResponseBody::mutable_response_body() {
  set_has_response_body();
  if (response_body_ == &::google::protobuf::internal::kEmptyString) {
    response_body_ = new ::std::string;
  }
  return response_body_;
}
inline ::std::string* SuccessResponseBody::release_response_body() {
  clear_has_response_body();
  if (response_body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = response_body_;
    response_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SuccessResponseBody::set_allocated_response_body(::std::string* response_body) {
  if (response_body_ != &::google::protobuf::internal::kEmptyString) {
    delete response_body_;
  }
  if (response_body) {
    set_has_response_body();
    response_body_ = response_body;
  } else {
    clear_has_response_body();
    response_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FailResponseBody

// optional string error_text = 1;
inline bool FailResponseBody::has_error_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FailResponseBody::set_has_error_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FailResponseBody::clear_has_error_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FailResponseBody::clear_error_text() {
  if (error_text_ != &::google::protobuf::internal::kEmptyString) {
    error_text_->clear();
  }
  clear_has_error_text();
}
inline const ::std::string& FailResponseBody::error_text() const {
  return *error_text_;
}
inline void FailResponseBody::set_error_text(const ::std::string& value) {
  set_has_error_text();
  if (error_text_ == &::google::protobuf::internal::kEmptyString) {
    error_text_ = new ::std::string;
  }
  error_text_->assign(value);
}
inline void FailResponseBody::set_error_text(const char* value) {
  set_has_error_text();
  if (error_text_ == &::google::protobuf::internal::kEmptyString) {
    error_text_ = new ::std::string;
  }
  error_text_->assign(value);
}
inline void FailResponseBody::set_error_text(const char* value, size_t size) {
  set_has_error_text();
  if (error_text_ == &::google::protobuf::internal::kEmptyString) {
    error_text_ = new ::std::string;
  }
  error_text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FailResponseBody::mutable_error_text() {
  set_has_error_text();
  if (error_text_ == &::google::protobuf::internal::kEmptyString) {
    error_text_ = new ::std::string;
  }
  return error_text_;
}
inline ::std::string* FailResponseBody::release_error_text() {
  clear_has_error_text();
  if (error_text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_text_;
    error_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FailResponseBody::set_allocated_error_text(::std::string* error_text) {
  if (error_text_ != &::google::protobuf::internal::kEmptyString) {
    delete error_text_;
  }
  if (error_text) {
    set_has_error_text();
    error_text_ = error_text;
  } else {
    clear_has_error_text();
    error_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ResponseMsg

// required int32 id = 1;
inline bool ResponseMsg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResponseMsg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResponseMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResponseMsg::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ResponseMsg::id() const {
  return id_;
}
inline void ResponseMsg::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required .pbrpc.proto.ResponseMsgType type = 2;
inline bool ResponseMsg::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResponseMsg::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResponseMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResponseMsg::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::pbrpc::proto::ResponseMsgType ResponseMsg::type() const {
  return static_cast< ::pbrpc::proto::ResponseMsgType >(type_);
}
inline void ResponseMsg::set_type(::pbrpc::proto::ResponseMsgType value) {
  assert(::pbrpc::proto::ResponseMsgType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .pbrpc.proto.SuccessResponseBody success_response = 10;
inline bool ResponseMsg::has_success_response() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResponseMsg::set_has_success_response() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResponseMsg::clear_has_success_response() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResponseMsg::clear_success_response() {
  if (success_response_ != NULL) success_response_->::pbrpc::proto::SuccessResponseBody::Clear();
  clear_has_success_response();
}
inline const ::pbrpc::proto::SuccessResponseBody& ResponseMsg::success_response() const {
  return success_response_ != NULL ? *success_response_ : *default_instance_->success_response_;
}
inline ::pbrpc::proto::SuccessResponseBody* ResponseMsg::mutable_success_response() {
  set_has_success_response();
  if (success_response_ == NULL) success_response_ = new ::pbrpc::proto::SuccessResponseBody;
  return success_response_;
}
inline ::pbrpc::proto::SuccessResponseBody* ResponseMsg::release_success_response() {
  clear_has_success_response();
  ::pbrpc::proto::SuccessResponseBody* temp = success_response_;
  success_response_ = NULL;
  return temp;
}
inline void ResponseMsg::set_allocated_success_response(::pbrpc::proto::SuccessResponseBody* success_response) {
  delete success_response_;
  success_response_ = success_response;
  if (success_response) {
    set_has_success_response();
  } else {
    clear_has_success_response();
  }
}

// optional .pbrpc.proto.FailResponseBody error_response = 11;
inline bool ResponseMsg::has_error_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResponseMsg::set_has_error_response() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResponseMsg::clear_has_error_response() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResponseMsg::clear_error_response() {
  if (error_response_ != NULL) error_response_->::pbrpc::proto::FailResponseBody::Clear();
  clear_has_error_response();
}
inline const ::pbrpc::proto::FailResponseBody& ResponseMsg::error_response() const {
  return error_response_ != NULL ? *error_response_ : *default_instance_->error_response_;
}
inline ::pbrpc::proto::FailResponseBody* ResponseMsg::mutable_error_response() {
  set_has_error_response();
  if (error_response_ == NULL) error_response_ = new ::pbrpc::proto::FailResponseBody;
  return error_response_;
}
inline ::pbrpc::proto::FailResponseBody* ResponseMsg::release_error_response() {
  clear_has_error_response();
  ::pbrpc::proto::FailResponseBody* temp = error_response_;
  error_response_ = NULL;
  return temp;
}
inline void ResponseMsg::set_allocated_error_response(::pbrpc::proto::FailResponseBody* error_response) {
  delete error_response_;
  error_response_ = error_response;
  if (error_response) {
    set_has_error_response();
  } else {
    clear_has_error_response();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace pbrpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbrpc::proto::RequestMsgType>() {
  return ::pbrpc::proto::RequestMsgType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pbrpc::proto::ResponseMsgType>() {
  return ::pbrpc::proto::ResponseMsgType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
